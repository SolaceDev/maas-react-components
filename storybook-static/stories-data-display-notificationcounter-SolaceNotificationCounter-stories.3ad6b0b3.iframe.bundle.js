(self.webpackChunkstorybook=self.webpackChunkstorybook||[]).push([[8773],{"./src/stories/data-display/notificationcounter/SolaceNotificationCounter.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{CustomAnimationNotificationCounter:()=>CustomAnimationNotificationCounter,CustomNotificationCounter:()=>CustomNotificationCounter,DefaultNotificationCounter:()=>DefaultNotificationCounter,NoAnimationNotificationCounter:()=>NoAnimationNotificationCounter,NotificationCounterWithTooltip:()=>NotificationCounterWithTooltip,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_storybook_testing_library__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@storybook/testing-library/dist/index.mjs"),_SolaceDev_maas_react_components__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("../dist/index.js");_SolaceDev_maas_react_components__WEBPACK_IMPORTED_MODULE_2__.SolaceNotificationCounter.displayName="SolaceNotificationCounter",_SolaceDev_maas_react_components__WEBPACK_IMPORTED_MODULE_2__.SolaceButton.displayName="SolaceButton";const __WEBPACK_DEFAULT_EXPORT__={title:"Data Display/Badge/Counter",component:_SolaceDev_maas_react_components__WEBPACK_IMPORTED_MODULE_2__.SolaceNotificationCounter,parameters:{},argTypes:{value:{control:{type:"text"},description:"The text to render in the circle. Can be a number, string, or text like '99+' for values that exceed a maximum threshold.",table:{type:{summary:"string | number"},defaultValue:{summary:"undefined"}}},show:{control:{type:"boolean"},description:"Whether to show the component. Use this to conditionally display the notification counter based on whether there are notifications to show.",table:{type:{summary:"boolean"},defaultValue:{summary:"true"}}},size:{control:{type:"number"},description:"Size of the circular badge in pixels. Affects both width and height. Use larger sizes for more prominent notifications or when displaying longer text content.",table:{type:{summary:"number"},defaultValue:{summary:"21"}}},fontSize:{control:{type:"number"},description:"Font size of the text inside the notification counter in pixels. Should be proportional to the size prop for optimal visual balance.",table:{type:{summary:"number"},defaultValue:{summary:"14"}}},animationDuration:{control:{type:"number"},description:"Duration of the animation effect in milliseconds. Set to 0 to disable animations. Use shorter durations for subtle effects, longer for more attention-grabbing notifications.",table:{type:{summary:"number"},defaultValue:{summary:"1000"}}},animationRepeatsInitialCount:{control:{type:"number"},description:"The number of animation cycles to run when showing the component for the first time. Use higher values for critical notifications that need immediate attention.",table:{type:{summary:"number"},defaultValue:{summary:"1"}}},animationRepeatsUpdateCount:{control:{type:"number"},description:"The number of animation cycles to run when the value is updated. Use higher values for significant updates that users should notice.",table:{type:{summary:"number"},defaultValue:{summary:"3"}}},title:{control:{type:"text"},description:"Tooltip text to display when hovering over the notification counter. Use this to provide additional context about what the counter represents.",table:{type:{summary:"string"},defaultValue:{summary:"undefined"}}},className:{control:{type:"text"},description:"Additional CSS class name to apply to the notification counter for custom styling.",table:{type:{summary:"string"},defaultValue:{summary:"undefined"}}},style:{control:!1,description:"Inline styles to apply to the notification counter. Use this for positioning or custom appearance modifications.",table:{type:{summary:"React.CSSProperties"},defaultValue:{summary:"undefined"}}},dataQa:{control:{type:"text"},description:"Data attribute for QA testing. Use this to identify notification counters during automated testing.",table:{type:{summary:"string"},defaultValue:{summary:"undefined"}}},dataTags:{control:{type:"text"},description:"Data attribute for additional tagging. Use this for analytics, tracking, or additional metadata.",table:{type:{summary:"string"},defaultValue:{summary:"undefined"}}}}};function NotificationCounterDemo(_ref){let{animiationDuration=1e3,animationRepeatsInitialCount=1,animationRepeatsUpdateCount=3,title}=_ref;const[counter,setCounter]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(1);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SolaceDev_maas_react_components__WEBPACK_IMPORTED_MODULE_2__.SolaceNotificationCounter,{value:counter,show:counter>0,animationDuration:animiationDuration,animationRepeatsInitialCount,animationRepeatsUpdateCount,title}),react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{style:{marginTop:"16px",display:"flex",gap:"16px"}},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SolaceDev_maas_react_components__WEBPACK_IMPORTED_MODULE_2__.SolaceButton,{variant:"call-to-action",onClick:()=>setCounter((previousCounter=>previousCounter+1))},"Increment"),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SolaceDev_maas_react_components__WEBPACK_IMPORTED_MODULE_2__.SolaceButton,{variant:"call-to-action",onClick:()=>setCounter((previousCounter=>previousCounter-1))},"Decrement")))}const DefaultNotificationCounter={render:()=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(NotificationCounterDemo,null),play:async _ref2=>{let{canvasElement}=_ref2;const canvas=(0,_storybook_testing_library__WEBPACK_IMPORTED_MODULE_1__.uh)(canvasElement);await _storybook_testing_library__WEBPACK_IMPORTED_MODULE_1__.mV.click(await canvas.findByText("Decrement")),await _storybook_testing_library__WEBPACK_IMPORTED_MODULE_1__.mV.click(await canvas.findByText("Increment")),await _storybook_testing_library__WEBPACK_IMPORTED_MODULE_1__.mV.click(await canvas.findByText("Increment")),await _storybook_testing_library__WEBPACK_IMPORTED_MODULE_1__.mV.click(await canvas.findByText("Increment")),await _storybook_testing_library__WEBPACK_IMPORTED_MODULE_1__.mV.click(await canvas.findByText("Increment")),await _storybook_testing_library__WEBPACK_IMPORTED_MODULE_1__.mV.click(await canvas.findByText("Decrement"))},parameters:{chromatic:{delay:5e3}}},CustomAnimationNotificationCounter={render:()=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(NotificationCounterDemo,{animiationDuration:500,animationRepeatsUpdateCount:2}),play:async _ref3=>{let{canvasElement}=_ref3;const canvas=(0,_storybook_testing_library__WEBPACK_IMPORTED_MODULE_1__.uh)(canvasElement);await _storybook_testing_library__WEBPACK_IMPORTED_MODULE_1__.mV.click(await canvas.findByText("Increment")),await _storybook_testing_library__WEBPACK_IMPORTED_MODULE_1__.mV.click(await canvas.findByText("Increment")),await _storybook_testing_library__WEBPACK_IMPORTED_MODULE_1__.mV.click(await canvas.findByText("Increment")),await _storybook_testing_library__WEBPACK_IMPORTED_MODULE_1__.mV.click(await canvas.findByText("Decrement"))},parameters:{chromatic:{delay:5e3}}},NoAnimationNotificationCounter={render:()=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(NotificationCounterDemo,{animiationDuration:0}),play:async _ref4=>{let{canvasElement}=_ref4;const canvas=(0,_storybook_testing_library__WEBPACK_IMPORTED_MODULE_1__.uh)(canvasElement);await _storybook_testing_library__WEBPACK_IMPORTED_MODULE_1__.mV.click(await canvas.findByText("Decrement")),await _storybook_testing_library__WEBPACK_IMPORTED_MODULE_1__.mV.click(await canvas.findByText("Increment")),await _storybook_testing_library__WEBPACK_IMPORTED_MODULE_1__.mV.click(await canvas.findByText("Increment")),await _storybook_testing_library__WEBPACK_IMPORTED_MODULE_1__.mV.click(await canvas.findByText("Increment")),await _storybook_testing_library__WEBPACK_IMPORTED_MODULE_1__.mV.click(await canvas.findByText("Decrement"))},parameters:{chromatic:{delay:5e3}}},NotificationCounterWithTooltip={render:()=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(NotificationCounterDemo,{animiationDuration:0,title:"new events"}),decorators:[Story=>react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{id:"snapshot",style:{position:"absolute",top:0,left:0,width:"100vw",height:"100vh"}},react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{style:{margin:"16px"}},react__WEBPACK_IMPORTED_MODULE_0__.createElement(Story,null)))],play:async _ref5=>{let{canvasElement}=_ref5;const canvas=(0,_storybook_testing_library__WEBPACK_IMPORTED_MODULE_1__.uh)(canvasElement);await _storybook_testing_library__WEBPACK_IMPORTED_MODULE_1__.mV.click(await canvas.findByText("1"))},parameters:{chromatic:{delay:5e3}}},CustomNotificationCounter={args:{value:"99+",fontSize:11}};DefaultNotificationCounter.parameters={...DefaultNotificationCounter.parameters,docs:{...DefaultNotificationCounter.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    return <NotificationCounterDemo />;\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    // Starts querying the component from it\'s root element\n    const canvas = within(canvasElement);\n    await userEvent.click(await canvas.findByText("Decrement"));\n    await userEvent.click(await canvas.findByText("Increment"));\n    await userEvent.click(await canvas.findByText("Increment"));\n    await userEvent.click(await canvas.findByText("Increment"));\n    await userEvent.click(await canvas.findByText("Increment"));\n    await userEvent.click(await canvas.findByText("Decrement"));\n  },\n  parameters: {\n    // Delay snapshot 5 seconds until all interactions are done\n    chromatic: {\n      delay: 5000\n    }\n  }\n}',...DefaultNotificationCounter.parameters?.docs?.source}}},CustomAnimationNotificationCounter.parameters={...CustomAnimationNotificationCounter.parameters,docs:{...CustomAnimationNotificationCounter.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    return <NotificationCounterDemo animiationDuration={500} animationRepeatsUpdateCount={2} />;\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    // Starts querying the component from it\'s root element\n    const canvas = within(canvasElement);\n    await userEvent.click(await canvas.findByText("Increment"));\n    await userEvent.click(await canvas.findByText("Increment"));\n    await userEvent.click(await canvas.findByText("Increment"));\n    await userEvent.click(await canvas.findByText("Decrement"));\n  },\n  parameters: {\n    // Delay snapshot 5 seconds until all interactions are done\n    chromatic: {\n      delay: 5000\n    }\n  }\n}',...CustomAnimationNotificationCounter.parameters?.docs?.source}}},NoAnimationNotificationCounter.parameters={...NoAnimationNotificationCounter.parameters,docs:{...NoAnimationNotificationCounter.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    return <NotificationCounterDemo animiationDuration={0} />;\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    // Starts querying the component from it\'s root element\n    const canvas = within(canvasElement);\n    await userEvent.click(await canvas.findByText("Decrement"));\n    await userEvent.click(await canvas.findByText("Increment"));\n    await userEvent.click(await canvas.findByText("Increment"));\n    await userEvent.click(await canvas.findByText("Increment"));\n    await userEvent.click(await canvas.findByText("Decrement"));\n  },\n  parameters: {\n    // Delay snapshot 5 seconds until all interactions are done\n    chromatic: {\n      delay: 5000\n    }\n  }\n}',...NoAnimationNotificationCounter.parameters?.docs?.source}}},NotificationCounterWithTooltip.parameters={...NotificationCounterWithTooltip.parameters,docs:{...NotificationCounterWithTooltip.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    return <NotificationCounterDemo animiationDuration={0} title={"new events"} />;\n  },\n  decorators: [withSnapshotContainer],\n  play: async ({\n    canvasElement\n  }) => {\n    // Starts querying the component from it\'s root element\n    const canvas = within(canvasElement);\n    await userEvent.click(await canvas.findByText("1"));\n  },\n  parameters: {\n    // Delay snapshot 5 seconds until all interactions are done\n    chromatic: {\n      delay: 5000\n    }\n  }\n}',...NotificationCounterWithTooltip.parameters?.docs?.source}}},CustomNotificationCounter.parameters={...CustomNotificationCounter.parameters,docs:{...CustomNotificationCounter.parameters?.docs,source:{originalSource:'{\n  args: {\n    value: "99+",\n    fontSize: 11\n  }\n}',...CustomNotificationCounter.parameters?.docs?.source}}};const __namedExportsOrder=["DefaultNotificationCounter","CustomAnimationNotificationCounter","NoAnimationNotificationCounter","NotificationCounterWithTooltip","CustomNotificationCounter"]},"?4f7e":()=>{}}]);