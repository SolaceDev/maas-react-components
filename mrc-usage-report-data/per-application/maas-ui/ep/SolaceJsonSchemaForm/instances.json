{"keyMap":{"filePath":"a","name":"b","props":"c","type":"d","value":"e"},"data":[{"a":"../../../maas-ui/micro-frontends/ep/src/pages/designer/configuration/RuntimeConfigurationJsonSchemaForm.tsx","c":[{"b":"formData","d":"variable","e":"formData"},{"b":"formItem","d":"object","e":"{\n\t\t\t\tid: \"solaceQueueForm\",\n\t\t\t\tschema: cloneDeep(schema)\n\t\t\t}"},{"b":"formOptions","d":"object","e":"{\n\t\t\t\torder: getOrder(schema.properties),\n\t\t\t\tisHidden\n\t\t\t}"},{"b":"onChange","d":"variable","e":"handleOnChange"},{"b":"transformError","d":"function","e":"(error: any) => {\n\t\t\t\tconst { name, message, property } = error;\n\t\t\t\tlet newMessage;\n\n\t\t\t\tif (name === \"required\") {\n\t\t\t\t\tnewMessage = \"Required. Enter a value\";\n\t\t\t\t} else if (name === \"pattern\") {\n\t\t\t\t\t// display any available placeholder value if it's a pattern error\n\t\t\t\t\tif (property === \".queueName\" && schema.properties.queueName.placeholder) {\n\t\t\t\t\t\tnewMessage = `Value ${message} (${schema.properties.queueName.placeholder})`;\n\t\t\t\t\t} else if (property === \".deadMsgQueue\" && schema.properties.deadMsgQueue.placeholder) {\n\t\t\t\t\t\tnewMessage = `Value ${message} (${schema.properties.deadMsgQueue.placeholder})`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnewMessage = `Value ${message}`;\n\t\t\t\t\t}\n\t\t\t\t} else if (message) {\n\t\t\t\t\tnewMessage = `Value ${message}`;\n\t\t\t\t} else if (name) {\n\t\t\t\t\t// i.e. no detail message\n\t\t\t\t\tnewMessage = \"Value is invalid\";\n\t\t\t\t}\n\n\t\t\t\terror.message = newMessage;\n\n\t\t\t\treturn error;\n\t\t\t}"},{"b":"transformTitle","d":"function","e":"(props) => transformProps(props, showPropertyNames)"},{"b":"transformWidget","d":"function","e":"(props) => transformProps(props, showPropertyNames)"}]},{"a":"../../../maas-ui/micro-frontends/ep/src/pages/designer/configuration/restDeliveryPoint/RESTConsumerJsonSchemaForm.tsx","c":[{"b":"formData","d":"variable","e":"formData"},{"b":"formItem","d":"object","e":"{\n\t\t\t\t\tid: \"restConsumerJsonSchemaForm\",\n\t\t\t\t\tschema: cloneDeep(schema)\n\t\t\t\t}"},{"b":"formOptions","d":"object","e":"{\n\t\t\t\t\tisHidden: (fieldType) => {\n\t\t\t\t\t\tswitch (fieldType) {\n\t\t\t\t\t\t\tcase \"submitButton\":\n\t\t\t\t\t\t\tcase \"title\":\n\t\t\t\t\t\t\tcase \"description\":\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\ttagName: \"div\"\n\t\t\t\t}"},{"b":"readOnly","d":"expression","e":"!onChange"},{"b":"disabled","d":"expression","e":"!enabled"},{"b":"onChange","d":"variable","e":"onChange"},{"b":"transformError","d":"function","e":"(error: any) => {\n\t\t\t\t\tconst { name, message } = error;\n\t\t\t\t\tlet newMessage;\n\n\t\t\t\t\tif (name === \"required\") {\n\t\t\t\t\t\tnewMessage = \"Required. Enter a value\";\n\t\t\t\t\t} else if (name === \"pattern\") {\n\t\t\t\t\t\tnewMessage = `Value ${message}`;\n\t\t\t\t\t} else if (name === \"const\" || name === \"oneOf\") {\n\t\t\t\t\t\tnewMessage = \"\"; // hide errors the user can do nothing about\n\t\t\t\t\t} else if (message) {\n\t\t\t\t\t\tnewMessage = `Value ${message}`;\n\t\t\t\t\t} else if (name) {\n\t\t\t\t\t\tnewMessage = \"Value is invalid\";\n\t\t\t\t\t}\n\n\t\t\t\t\terror.message = newMessage;\n\n\t\t\t\t\treturn error;\n\t\t\t\t}"},{"b":"transformWidget","d":"function","e":"(props) => {\n\t\t\t\t\tconst newProps = { ...props };\n\n\t\t\t\t\tnewProps.label = messages[newProps.label] ?? newProps.label;\n\t\t\t\t\tnewProps.title = messages[newProps.title] ?? newProps.title;\n\n\t\t\t\t\tif (newProps.schema?.const !== undefined) {\n\t\t\t\t\t\tnewProps.readonly = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!onChange && newProps.id === \"restConsumerJsonSchemaForm__oneof_select\") {\n\t\t\t\t\t\tnewProps.readonly = true;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn newProps;\n\t\t\t\t}"},{"b":"ajvClass","d":"variable","e":"Ajv2019"}]}]}