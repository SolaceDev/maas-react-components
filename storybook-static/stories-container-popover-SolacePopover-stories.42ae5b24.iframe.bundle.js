(self.webpackChunkstorybook=self.webpackChunkstorybook||[]).push([[3787],{"./node_modules/@storybook/addon-actions/dist/index.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{aD:()=>action});var v4=__webpack_require__("./node_modules/uuid/dist/esm-browser/v4.js"),external_STORYBOOK_MODULE_PREVIEW_API_=__webpack_require__("@storybook/preview-api"),external_STORYBOOK_MODULE_GLOBAL_=__webpack_require__("@storybook/global"),external_STORYBOOK_MODULE_CORE_EVENTS_PREVIEW_ERRORS_=__webpack_require__("@storybook/core-events/preview-errors"),ADDON_ID="storybook/actions",EVENT_ID=`${ADDON_ID}/action-event`,config={depth:10,clearOnStoryChange:!0,limit:50},findProto=(obj,callback)=>{let proto=Object.getPrototypeOf(obj);return!proto||callback(proto)?proto:findProto(proto,callback)},serializeArg=a=>{if("object"==typeof(e=a)&&e&&findProto(e,(proto=>/^Synthetic(?:Base)?Event$/.test(proto.constructor.name)))&&"function"==typeof e.persist){let e=Object.create(a.constructor.prototype,Object.getOwnPropertyDescriptors(a));e.persist();let viewDescriptor=Object.getOwnPropertyDescriptor(e,"view"),view=viewDescriptor?.value;return"object"==typeof view&&"Window"===view?.constructor.name&&Object.defineProperty(e,"view",{...viewDescriptor,value:Object.create(view.constructor.prototype)}),e}var e;return a},generateId=()=>"object"==typeof crypto&&"function"==typeof crypto.getRandomValues?(0,v4.Z)():Date.now().toString(36)+Math.random().toString(36).substring(2);function action(name,options={}){let actionOptions={...config,...options},handler=function(...args){if(options.implicit){let storyRenderer=("__STORYBOOK_PREVIEW__"in external_STORYBOOK_MODULE_GLOBAL_.global?external_STORYBOOK_MODULE_GLOBAL_.global.__STORYBOOK_PREVIEW__:void 0)?.storyRenders.find((render=>"playing"===render.phase||"rendering"===render.phase));if(storyRenderer){let deprecated=!window?.FEATURES?.disallowImplicitActionsInRenderV8,error=new external_STORYBOOK_MODULE_CORE_EVENTS_PREVIEW_ERRORS_.ImplicitActionsDuringRendering({phase:storyRenderer.phase,name,deprecated});if(!deprecated)throw error;console.warn(error)}}let channel=external_STORYBOOK_MODULE_PREVIEW_API_.addons.getChannel(),id=generateId(),serializedArgs=args.map(serializeArg),normalizedArgs=args.length>1?serializedArgs:serializedArgs[0],actionDisplayToEmit={id,count:0,data:{name,args:normalizedArgs},options:{...actionOptions,maxDepth:5+(actionOptions.depth||3),allowFunction:actionOptions.allowFunction||!1}};channel.emit(EVENT_ID,actionDisplayToEmit)};return handler.isAction=!0,handler.implicit=options.implicit,handler}},"./src/stories/container/popover/SolacePopover.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{DefaultPopover:()=>DefaultPopover,WithAnchorAndTransformOrigin:()=>WithAnchorAndTransformOrigin,WithAnchorPosition:()=>WithAnchorPosition,WithCustomAnchorOffest:()=>WithCustomAnchorOffest,WithFormValidation:()=>WithFormValidation,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_SolaceDev_maas_react_components__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../dist/index.js"),_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@storybook/addon-actions/dist/index.mjs"),_storybook_test__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@storybook/test/dist/index.mjs");function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},_extends.apply(null,arguments)}_SolaceDev_maas_react_components__WEBPACK_IMPORTED_MODULE_1__.SolacePopover.displayName="SolacePopover",_SolaceDev_maas_react_components__WEBPACK_IMPORTED_MODULE_1__.SolaceButton.displayName="SolaceButton",_SolaceDev_maas_react_components__WEBPACK_IMPORTED_MODULE_1__.SolaceTextField.displayName="SolaceTextField",_SolaceDev_maas_react_components__WEBPACK_IMPORTED_MODULE_1__.SolaceTypography.displayName="SolaceTypography";const __WEBPACK_DEFAULT_EXPORT__={title:"Container/Popover",component:_SolaceDev_maas_react_components__WEBPACK_IMPORTED_MODULE_1__.SolacePopover,parameters:{chromatic:{delay:1e3},design:{type:"figma",url:"https://www.figma.com/design/4Y6nwn19uTNgpxzNAP5Vqe/Patterns?node-id=21909-955&p=f&t=nZPRTnBQWGY5q2cb-0"},docs:{description:{component:"A Popover can be used to display some content on top of another. Popovers can appear in-context, aligned to the anchor element. Alignment can vary depending on where the anchor element is placed on a page."}}},argTypes:{id:{control:{type:"text"},description:"Unique identifier for the popover. This is important for accessibility and helps screen readers identify the popover content. It's used for ARIA attributes and should be unique across the page. The id is also used to establish the relationship between the trigger element and the popover content via aria-describedby."},anchorElement:{control:!1,description:"The ref element the popover is going to anchor to. If no anchor element is provided, the popover will anchor to the top left of the application's client area. This is typically a button or other interactive element that triggers the popover. When using anchorElement, the anchorPosition prop is ignored."},anchorPosition:{control:"object",description:"Position of the anchor element relative to the top left corner of the application's client area. Use this when you need to position the popover relative to a specific point rather than an element. This prop is used when you want absolute positioning, such as for context menus. The object should contain 'top' and 'left' properties with numeric values representing pixel positions. When using anchorPosition, the anchorElement prop is ignored."},anchorOrigin:{control:"object",description:"This is the point on the referenced anchor where the popover will attach to. This is used to determine the position of the popover. Can be specified using vertical ('top', 'center', 'bottom') and horizontal ('left', 'center', 'right') values, or with numeric pixel values for precise positioning. For example, { vertical: 'bottom', horizontal: 'center' } will position the popover below the anchor, centered horizontally."},transformOrigin:{control:"object",description:"This is the point on the popover which will attach to the anchor's origin. Works in conjunction with anchorOrigin to determine the final position of the popover relative to its anchor element. For example, if anchorOrigin is { vertical: 'bottom', horizontal: 'center' } and transformOrigin is { vertical: 'top', horizontal: 'center' }, the popover's top-center will attach to the anchor's bottom-center."},open:{control:"boolean",description:"Controls whether the popover is open. Use this prop to programmatically show or hide the popover based on user interactions or application state. This makes the popover a controlled component, meaning its visibility state is fully managed by the parent component."},children:{control:!1,description:"The content to be displayed inside the popover. This can be any valid React node, including text, elements, or components. The content is rendered within a Paper component that provides the visual container for the popover."},onClose:{control:!1,description:"Callback fired when the popover requests to be closed. This function is triggered when the user clicks outside the popover or presses the escape key (unless these behaviors are disabled). The callback receives the event that triggered the close action as its parameter. This is essential for controlled components to update their state and close the popover."},marginThreshold:{control:{type:"number"},description:"Specifies the minimum margin (in pixels) between the popover and the screen edges. This ensures the popover remains visible even when the anchor is near the edge of the viewport."},activateOnHover:{control:"boolean",description:"Determines if the popover should activate on hover rather than click. When true, the popover will appear when the user hovers over the anchor element and disappear when the mouse leaves. Setting this to true also disables pointer events on the popover (sets pointerEvents: 'none'), which affects how the popover interacts with mouse events. This is useful for tooltip-like behavior where you want the popover to appear on hover but not intercept mouse events."},dataQa:{control:"text",description:"Data attribute for QA purposes. This attribute helps with automated testing by providing a consistent selector for test scripts. It's added as a data-qa attribute to the DOM element."},dataTags:{control:"text",description:"Data tags for the popover. These can be used for analytics tracking or other custom metadata needs."}}},PopoverFormContent=props=>{const{onClose,onSubmit,onFirstNameChange,onLastNameChange,invalid,...remainingProps}=props;return react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",_extends({},remainingProps,{style:{padding:"16px"}}),react__WEBPACK_IMPORTED_MODULE_0__.createElement("form",null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SolaceDev_maas_react_components__WEBPACK_IMPORTED_MODULE_1__.SolaceStack,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SolaceDev_maas_react_components__WEBPACK_IMPORTED_MODULE_1__.SolaceTextField,{label:"First Name",name:"popoverSampleFirstNameField",title:"Popover Sample First Name Field",required:!0,onChange:onFirstNameChange}),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SolaceDev_maas_react_components__WEBPACK_IMPORTED_MODULE_1__.SolaceTextField,{label:"Last Name",name:"popoverSampleLastNameField",title:"Popover Sample Last Name Field",required:!0,onChange:onLastNameChange}),react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{style:{display:"flex",justifyContent:"flex-end",gap:"8px"}},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SolaceDev_maas_react_components__WEBPACK_IMPORTED_MODULE_1__.SolaceButton,{variant:"outline",onClick:onClose},"Cancel"),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SolaceDev_maas_react_components__WEBPACK_IMPORTED_MODULE_1__.SolaceButton,{variant:"call-to-action",onClick:onSubmit},"Submit")),invalid&&react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SolaceDev_maas_react_components__WEBPACK_IMPORTED_MODULE_1__.SolaceTypography,{variant:"body2",color:"error"},"Please enter a valid first and last name"))))},PopoverTemplate=args=>{const{testTitle,testMessage,...popoverArgs}=args,popoverContentRef=(0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null),[anchorEl,setAnchorEl]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null),open=Boolean(anchorEl),id=open?"simple-popover":void 0,handleClose=()=>{(0,_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_2__.aD)("UserClickedElsewhereToClosePopover"),setAnchorEl(null)};return(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{const handleDocumentClick=event=>{open&&anchorEl&&popoverContentRef.current&&!anchorEl.contains(event.target)&&!popoverContentRef.current.contains(event.target)&&handleClose()};return document.addEventListener("click",handleDocumentClick),()=>{document.removeEventListener("click",handleDocumentClick)}}),[open,anchorEl]),react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{style:{width:"600px"}},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SolaceDev_maas_react_components__WEBPACK_IMPORTED_MODULE_1__.SolaceTypography,{variant:"h2",component:"div"},testTitle),testMessage,testMessage&&react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SolaceDev_maas_react_components__WEBPACK_IMPORTED_MODULE_1__.Box,{height:"20px"}),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SolaceDev_maas_react_components__WEBPACK_IMPORTED_MODULE_1__.SolacePopover,_extends({id,anchorElement:anchorEl,ref:popoverContentRef,open},popoverArgs,{onClose:handleClose}),react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{style:{width:"500px",padding:"16px"}},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SolaceDev_maas_react_components__WEBPACK_IMPORTED_MODULE_1__.SolaceTypography,{variant:"body1",component:"div"},"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat"))),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SolaceDev_maas_react_components__WEBPACK_IMPORTED_MODULE_1__.SolaceButton,{"aria-describedby":id,variant:"call-to-action",onClick:event=>{(0,_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_2__.aD)("ClickMeButtonClicked"),setAnchorEl(event.currentTarget)}},"Click Me To Launch Popover"))},DefaultPopover=PopoverTemplate.bind({});DefaultPopover.args={testTitle:"Default Popover",testMessage:react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SolaceDev_maas_react_components__WEBPACK_IMPORTED_MODULE_1__.SolaceTypography,{variant:"h3",component:"div"},"This test showcases the default Popover with no additional properties set"),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SolaceDev_maas_react_components__WEBPACK_IMPORTED_MODULE_1__.SolaceTypography,{variant:"body1",component:"div"},"Clicking the 'Click Me To Launch Popover' button will display the Popover. Once the Popover is displayed, clicking anywhere outside the Popover will close it."))},DefaultPopover.parameters={docs:{story:{before:"The standard popover with default positioning and behavior. This is the most common popover pattern and should be used for displaying supplementary information or controls without navigating away from the current context."}}},DefaultPopover.play=async _ref=>{let{canvasElement}=_ref;const button=(0,_storybook_test__WEBPACK_IMPORTED_MODULE_3__.uh)(canvasElement).getByRole("button");await _storybook_test__WEBPACK_IMPORTED_MODULE_3__.mV.click(button)};const WithAnchorAndTransformOrigin=PopoverTemplate.bind({});WithAnchorAndTransformOrigin.args={testTitle:"Popover With Degined Anchor and Transform",testMessage:react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SolaceDev_maas_react_components__WEBPACK_IMPORTED_MODULE_1__.SolaceTypography,{variant:"h3",component:"div"},"This test showcases how a Popover component positioned by its anchor and transform properties"),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SolaceDev_maas_react_components__WEBPACK_IMPORTED_MODULE_1__.SolaceTypography,{variant:"body1",component:"div"},"This test has the anchorOrigin set to top right and the transformOrigin set to top left."),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SolaceDev_maas_react_components__WEBPACK_IMPORTED_MODULE_1__.SolaceTypography,{variant:"body1",component:"div"},"Clicking the 'Click Me To Launch Popover' button will display the Popover. Once the Popover is displayed, clicking anywhere outside the Popover will close it.")),anchorOrigin:{vertical:"top",horizontal:"right"},transformOrigin:{vertical:"top",horizontal:"left"}},WithAnchorAndTransformOrigin.parameters={docs:{story:{before:"A popover with custom anchor and transform origins. Use this pattern when you need precise control over the popover's position relative to its anchor element. This example positions the popover so that its top-left corner connects to the top-right corner of the anchor element.\n\n**Prop Dependencies:**\n- `anchorOrigin` and `transformOrigin` - These props work together to determine the final position of the popover. The anchorOrigin defines the point on the anchor element where the popover will attach, while transformOrigin defines the point on the popover that will connect to that anchor point."}}},WithAnchorAndTransformOrigin.play=async _ref2=>{let{canvasElement}=_ref2;const button=(0,_storybook_test__WEBPACK_IMPORTED_MODULE_3__.uh)(canvasElement).getByRole("button");await _storybook_test__WEBPACK_IMPORTED_MODULE_3__.mV.click(button)};const WithCustomAnchorOffest=PopoverTemplate.bind({});WithCustomAnchorOffest.args={testTitle:"Popover With Custom Anchor Offset",testMessage:react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SolaceDev_maas_react_components__WEBPACK_IMPORTED_MODULE_1__.SolaceTypography,{variant:"h3",component:"div"},"This test showcases how a Popover component positioned using a custom anchor offset to displace it from the anchor"),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SolaceDev_maas_react_components__WEBPACK_IMPORTED_MODULE_1__.SolaceTypography,{variant:"body1",component:"div"},"An anchor offset of 36 pixels from the top and left is set for the anchorOrigin so to offset the Popover 10px away from the anchor (anchor button is 26px tall, leaving 10 px of offset). The transformOrigin is set to top left."),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SolaceDev_maas_react_components__WEBPACK_IMPORTED_MODULE_1__.SolaceTypography,{variant:"body1",component:"div"},"Clicking the 'Click Me To Launch Popover' button will display the Popover. Once the Popover is displayed, clicking anywhere outside the Popover will close it.")),anchorOrigin:{vertical:36,horizontal:"left"},transformOrigin:{vertical:"top",horizontal:"left"}},WithCustomAnchorOffest.parameters={docs:{story:{before:"A popover with a custom numeric anchor offset. Use this pattern when you need to fine-tune the position of the popover with pixel-level precision, such as when you want to create a specific spacing between the anchor and the popover.\n\n**Prop Dependencies:**\n- `anchorOrigin` - When using numeric values (like 36) instead of keywords ('top', 'bottom', etc.), you can achieve precise pixel positioning relative to the anchor element.\n- `transformOrigin` - Works with the custom anchorOrigin to determine the final position."}}},WithCustomAnchorOffest.play=async _ref3=>{let{canvasElement}=_ref3;const button=(0,_storybook_test__WEBPACK_IMPORTED_MODULE_3__.uh)(canvasElement).getByRole("button");await _storybook_test__WEBPACK_IMPORTED_MODULE_3__.mV.click(button)};const WithAnchorPosition=PopoverTemplate.bind({});WithAnchorPosition.args={testTitle:"Popover With Anchor Position",testMessage:react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SolaceDev_maas_react_components__WEBPACK_IMPORTED_MODULE_1__.SolaceTypography,{variant:"h3",component:"div"},"This test showcases how a Popover component positioned using an anchor position"),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SolaceDev_maas_react_components__WEBPACK_IMPORTED_MODULE_1__.SolaceTypography,{variant:"body1",component:"div"},"An anchor position of 120px from the top and 150px from the left relative to the application's client area."),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SolaceDev_maas_react_components__WEBPACK_IMPORTED_MODULE_1__.SolaceTypography,{variant:"body1",component:"div"},"Clicking the 'Click Me To Launch Popover' button will display the Popover. Once the Popover is displayed, clicking anywhere outside the Popover will close it.")),anchorPosition:{top:120,left:150}},WithAnchorPosition.parameters={docs:{story:{before:"A popover positioned at specific coordinates on the screen. Use this pattern when you need to position a popover relative to the viewport rather than an anchor element. This is useful for context menus, tooltips for map points, or any scenario where the popover should appear at an absolute position.\n\n**Prop Dependencies:**\n- `anchorPosition` - When using this prop, the popover will ignore the `anchorElement` prop and position itself based on the specified coordinates relative to the application's client area. These two props are mutually exclusive - if you provide `anchorPosition`, the `anchorElement` will be ignored."}}},WithAnchorPosition.play=async _ref4=>{let{canvasElement}=_ref4;const button=(0,_storybook_test__WEBPACK_IMPORTED_MODULE_3__.uh)(canvasElement).getByRole("button");await _storybook_test__WEBPACK_IMPORTED_MODULE_3__.mV.click(button)};const WithFormValidation=(args=>{const{testTitle,testMessage,...popoverArgs}=args,popoverFormContentRef=(0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null),[anchorEl,setAnchorEl]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null),open=Boolean(anchorEl),id=open?"simple-popover":void 0,[firstName,setFirstName]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(""),[lastName,setLastName]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(""),[invalid,setInvalid]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1),handleClose=()=>{(0,_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_2__.aD)("UserClickedElsewhereToClosePopover"),firstName&&lastName?(setFirstName(""),setLastName(""),setInvalid(!1),setAnchorEl(null)):setInvalid(!0)};return(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{const handleDocumentClick=event=>{open&&anchorEl&&popoverFormContentRef.current&&!anchorEl.contains(event.target)&&!popoverFormContentRef.current.contains(event.target)&&handleClose()};return document.addEventListener("click",handleDocumentClick),()=>{document.removeEventListener("click",handleDocumentClick)}}),[open,firstName,lastName,anchorEl]),react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{style:{width:"600px"}},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SolaceDev_maas_react_components__WEBPACK_IMPORTED_MODULE_1__.SolaceTypography,{variant:"h2",component:"div"},testTitle),testMessage,testMessage&&react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SolaceDev_maas_react_components__WEBPACK_IMPORTED_MODULE_1__.Box,{height:"20px"}),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SolaceDev_maas_react_components__WEBPACK_IMPORTED_MODULE_1__.SolacePopover,_extends({id,anchorElement:anchorEl,ref:popoverFormContentRef,open,onClose:handleClose},popoverArgs),react__WEBPACK_IMPORTED_MODULE_0__.createElement(PopoverFormContent,{invalid,onFirstNameChange:event=>{(0,_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_2__.aD)("firstNameChanged"),setInvalid(!1),setFirstName(event?.value)},onLastNameChange:event=>{(0,_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_2__.aD)("lastNameChanged"),setInvalid(!1),setLastName(event.value)},onClose:()=>{setFirstName(""),setLastName(""),setInvalid(!1),setAnchorEl(null)},onSubmit:event=>{event.preventDefault(),firstName&&lastName?(setFirstName(""),setLastName(""),setInvalid(!1),setAnchorEl(null)):setInvalid(!0)}})),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SolaceDev_maas_react_components__WEBPACK_IMPORTED_MODULE_1__.SolaceButton,{"aria-describedby":id,variant:"call-to-action",onClick:event=>{(0,_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_2__.aD)("ClickMeButtonClicked"),setAnchorEl(event.currentTarget)}},"Click Me To Launch Popover"))}).bind({});WithFormValidation.args={testTitle:"Popover With Custom Anchor Offset",testMessage:react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SolaceDev_maas_react_components__WEBPACK_IMPORTED_MODULE_1__.SolaceTypography,{variant:"h3",component:"div"},"This test showcases how a Popover can remain visible until a form is submitted with valid data"),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SolaceDev_maas_react_components__WEBPACK_IMPORTED_MODULE_1__.SolaceTypography,{variant:"body1",component:"div"},"Clicking anywhere outside the Popover shall first validate the form before closing. If any form elements are invalid, the Popover shall remain open and the form can optionally show some validation errors for the user to be corrected. Correcting the validation errors or cancelling the form will allow the user to close the popover."),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SolaceDev_maas_react_components__WEBPACK_IMPORTED_MODULE_1__.SolaceTypography,{variant:"body1",component:"div"},"Clicking the 'Click Me To Launch Popover' button will display the Popover. Once the Popover is displayed, clicking anywhere outside the Popover will close it.")),anchorOrigin:{vertical:36,horizontal:"left"},transformOrigin:{vertical:"top",horizontal:"left"}},WithFormValidation.decorators=[Story=>react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{id:"snapshot",style:{height:"600px",padding:"0px",margin:"0px"}},react__WEBPACK_IMPORTED_MODULE_0__.createElement(Story,null))],WithFormValidation.parameters={docs:{story:{before:"A popover containing a form with validation. Use this pattern when you need to collect user input while maintaining the current page context. This example demonstrates how to keep the popover open until valid data is submitted, preventing accidental data loss.\n\n**Prop Dependencies:**\n- `onClose` - This prop is crucial for form validation popovers as it allows you to implement custom closing logic that can prevent the popover from closing when form data is invalid.\n- `anchorOrigin` and `transformOrigin` - These props are used here to position the form popover appropriately relative to its trigger button."}}},WithFormValidation.play=async _ref5=>{let{canvasElement}=_ref5;const button=(0,_storybook_test__WEBPACK_IMPORTED_MODULE_3__.uh)(canvasElement).getByRole("button");await _storybook_test__WEBPACK_IMPORTED_MODULE_3__.mV.click(button)},DefaultPopover.parameters={...DefaultPopover.parameters,docs:{...DefaultPopover.parameters?.docs,source:{originalSource:'args => {\n  const {\n    testTitle,\n    testMessage,\n    ...popoverArgs\n  } = args;\n  const popoverContentRef = useRef<HTMLDivElement>(null);\n  const [anchorEl, setAnchorEl] = useState<HTMLButtonElement | null>(null);\n  const open = Boolean(anchorEl);\n  const id = open ? "simple-popover" : undefined;\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    action("ClickMeButtonClicked");\n    setAnchorEl(event.currentTarget);\n  };\n  const handleClose = () => {\n    action("UserClickedElsewhereToClosePopover");\n    setAnchorEl(null);\n  };\n  useEffect(() => {\n    const handleDocumentClick = (event: MouseEvent) => {\n      if (open && anchorEl && popoverContentRef.current && !anchorEl.contains(event.target as Node) && !popoverContentRef.current.contains(event.target as Node)) {\n        handleClose();\n      }\n    };\n    document.addEventListener("click", handleDocumentClick);\n    return () => {\n      document.removeEventListener("click", handleDocumentClick);\n    };\n  }, [open, anchorEl]);\n  return <div style={{\n    width: "600px"\n  }}>\n            <SolaceTypography variant="h2" component="div">\n                {testTitle}\n            </SolaceTypography>\n            {testMessage}\n            {testMessage && <Box height="20px" />}\n            <SolacePopover id={id} anchorElement={anchorEl} ref={popoverContentRef} open={open} {...popoverArgs} onClose={handleClose}>\n                <div style={{\n        width: "500px",\n        padding: "16px"\n      }}>\n                    <SolaceTypography variant="body1" component="div">\n                        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et\n                        dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex\n                        ea commodo consequat\n                    </SolaceTypography>\n                </div>\n            </SolacePopover>\n\n            <SolaceButton aria-describedby={id} variant="call-to-action" onClick={handleClick}>\n                Click Me To Launch Popover\n            </SolaceButton>\n        </div>;\n}',...DefaultPopover.parameters?.docs?.source}}},WithAnchorAndTransformOrigin.parameters={...WithAnchorAndTransformOrigin.parameters,docs:{...WithAnchorAndTransformOrigin.parameters?.docs,source:{originalSource:'args => {\n  const {\n    testTitle,\n    testMessage,\n    ...popoverArgs\n  } = args;\n  const popoverContentRef = useRef<HTMLDivElement>(null);\n  const [anchorEl, setAnchorEl] = useState<HTMLButtonElement | null>(null);\n  const open = Boolean(anchorEl);\n  const id = open ? "simple-popover" : undefined;\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    action("ClickMeButtonClicked");\n    setAnchorEl(event.currentTarget);\n  };\n  const handleClose = () => {\n    action("UserClickedElsewhereToClosePopover");\n    setAnchorEl(null);\n  };\n  useEffect(() => {\n    const handleDocumentClick = (event: MouseEvent) => {\n      if (open && anchorEl && popoverContentRef.current && !anchorEl.contains(event.target as Node) && !popoverContentRef.current.contains(event.target as Node)) {\n        handleClose();\n      }\n    };\n    document.addEventListener("click", handleDocumentClick);\n    return () => {\n      document.removeEventListener("click", handleDocumentClick);\n    };\n  }, [open, anchorEl]);\n  return <div style={{\n    width: "600px"\n  }}>\n            <SolaceTypography variant="h2" component="div">\n                {testTitle}\n            </SolaceTypography>\n            {testMessage}\n            {testMessage && <Box height="20px" />}\n            <SolacePopover id={id} anchorElement={anchorEl} ref={popoverContentRef} open={open} {...popoverArgs} onClose={handleClose}>\n                <div style={{\n        width: "500px",\n        padding: "16px"\n      }}>\n                    <SolaceTypography variant="body1" component="div">\n                        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et\n                        dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex\n                        ea commodo consequat\n                    </SolaceTypography>\n                </div>\n            </SolacePopover>\n\n            <SolaceButton aria-describedby={id} variant="call-to-action" onClick={handleClick}>\n                Click Me To Launch Popover\n            </SolaceButton>\n        </div>;\n}',...WithAnchorAndTransformOrigin.parameters?.docs?.source}}},WithCustomAnchorOffest.parameters={...WithCustomAnchorOffest.parameters,docs:{...WithCustomAnchorOffest.parameters?.docs,source:{originalSource:'args => {\n  const {\n    testTitle,\n    testMessage,\n    ...popoverArgs\n  } = args;\n  const popoverContentRef = useRef<HTMLDivElement>(null);\n  const [anchorEl, setAnchorEl] = useState<HTMLButtonElement | null>(null);\n  const open = Boolean(anchorEl);\n  const id = open ? "simple-popover" : undefined;\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    action("ClickMeButtonClicked");\n    setAnchorEl(event.currentTarget);\n  };\n  const handleClose = () => {\n    action("UserClickedElsewhereToClosePopover");\n    setAnchorEl(null);\n  };\n  useEffect(() => {\n    const handleDocumentClick = (event: MouseEvent) => {\n      if (open && anchorEl && popoverContentRef.current && !anchorEl.contains(event.target as Node) && !popoverContentRef.current.contains(event.target as Node)) {\n        handleClose();\n      }\n    };\n    document.addEventListener("click", handleDocumentClick);\n    return () => {\n      document.removeEventListener("click", handleDocumentClick);\n    };\n  }, [open, anchorEl]);\n  return <div style={{\n    width: "600px"\n  }}>\n            <SolaceTypography variant="h2" component="div">\n                {testTitle}\n            </SolaceTypography>\n            {testMessage}\n            {testMessage && <Box height="20px" />}\n            <SolacePopover id={id} anchorElement={anchorEl} ref={popoverContentRef} open={open} {...popoverArgs} onClose={handleClose}>\n                <div style={{\n        width: "500px",\n        padding: "16px"\n      }}>\n                    <SolaceTypography variant="body1" component="div">\n                        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et\n                        dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex\n                        ea commodo consequat\n                    </SolaceTypography>\n                </div>\n            </SolacePopover>\n\n            <SolaceButton aria-describedby={id} variant="call-to-action" onClick={handleClick}>\n                Click Me To Launch Popover\n            </SolaceButton>\n        </div>;\n}',...WithCustomAnchorOffest.parameters?.docs?.source}}},WithAnchorPosition.parameters={...WithAnchorPosition.parameters,docs:{...WithAnchorPosition.parameters?.docs,source:{originalSource:'args => {\n  const {\n    testTitle,\n    testMessage,\n    ...popoverArgs\n  } = args;\n  const popoverContentRef = useRef<HTMLDivElement>(null);\n  const [anchorEl, setAnchorEl] = useState<HTMLButtonElement | null>(null);\n  const open = Boolean(anchorEl);\n  const id = open ? "simple-popover" : undefined;\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    action("ClickMeButtonClicked");\n    setAnchorEl(event.currentTarget);\n  };\n  const handleClose = () => {\n    action("UserClickedElsewhereToClosePopover");\n    setAnchorEl(null);\n  };\n  useEffect(() => {\n    const handleDocumentClick = (event: MouseEvent) => {\n      if (open && anchorEl && popoverContentRef.current && !anchorEl.contains(event.target as Node) && !popoverContentRef.current.contains(event.target as Node)) {\n        handleClose();\n      }\n    };\n    document.addEventListener("click", handleDocumentClick);\n    return () => {\n      document.removeEventListener("click", handleDocumentClick);\n    };\n  }, [open, anchorEl]);\n  return <div style={{\n    width: "600px"\n  }}>\n            <SolaceTypography variant="h2" component="div">\n                {testTitle}\n            </SolaceTypography>\n            {testMessage}\n            {testMessage && <Box height="20px" />}\n            <SolacePopover id={id} anchorElement={anchorEl} ref={popoverContentRef} open={open} {...popoverArgs} onClose={handleClose}>\n                <div style={{\n        width: "500px",\n        padding: "16px"\n      }}>\n                    <SolaceTypography variant="body1" component="div">\n                        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et\n                        dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex\n                        ea commodo consequat\n                    </SolaceTypography>\n                </div>\n            </SolacePopover>\n\n            <SolaceButton aria-describedby={id} variant="call-to-action" onClick={handleClick}>\n                Click Me To Launch Popover\n            </SolaceButton>\n        </div>;\n}',...WithAnchorPosition.parameters?.docs?.source}}},WithFormValidation.parameters={...WithFormValidation.parameters,docs:{...WithFormValidation.parameters?.docs,source:{originalSource:'args => {\n  const {\n    testTitle,\n    testMessage,\n    ...popoverArgs\n  } = args;\n  const popoverFormContentRef = useRef<HTMLDivElement>(null);\n  const [anchorEl, setAnchorEl] = useState<HTMLButtonElement | null>(null);\n  const open = Boolean(anchorEl);\n  const id = open ? "simple-popover" : undefined;\n  const [firstName, setFirstName] = useState("");\n  const [lastName, setLastName] = useState("");\n  const [invalid, setInvalid] = useState(false);\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    action("ClickMeButtonClicked");\n    setAnchorEl(event.currentTarget);\n  };\n  const handleClose = () => {\n    action("UserClickedElsewhereToClosePopover");\n    if (!firstName || !lastName) {\n      setInvalid(true);\n    } else {\n      setFirstName("");\n      setLastName("");\n      setInvalid(false);\n      setAnchorEl(null);\n    }\n  };\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if (!firstName || !lastName) {\n      setInvalid(true);\n    } else {\n      setFirstName("");\n      setLastName("");\n      setInvalid(false);\n      setAnchorEl(null);\n    }\n  };\n  const handleCancel = () => {\n    setFirstName("");\n    setLastName("");\n    setInvalid(false);\n    setAnchorEl(null);\n  };\n  const handleFirstNameChange = event => {\n    action("firstNameChanged");\n    setInvalid(false);\n    setFirstName(event?.value);\n  };\n  const handleLastNameChange = event => {\n    action("lastNameChanged");\n    setInvalid(false);\n    setLastName(event.value);\n  };\n  useEffect(() => {\n    const handleDocumentClick = (event: MouseEvent) => {\n      if (open && anchorEl && popoverFormContentRef.current && !anchorEl.contains(event.target as Node) && !popoverFormContentRef.current.contains(event.target as Node)) {\n        handleClose();\n      }\n    };\n    document.addEventListener("click", handleDocumentClick);\n    return () => {\n      document.removeEventListener("click", handleDocumentClick);\n    };\n  }, [open, firstName, lastName, anchorEl]);\n  return <div style={{\n    width: "600px"\n  }}>\n            <SolaceTypography variant="h2" component="div">\n                {testTitle}\n            </SolaceTypography>\n            {testMessage}\n            {testMessage && <Box height="20px" />}\n            <SolacePopover id={id} anchorElement={anchorEl} ref={popoverFormContentRef} open={open} onClose={handleClose} {...popoverArgs}>\n                <PopoverFormContent invalid={invalid} onFirstNameChange={handleFirstNameChange} onLastNameChange={handleLastNameChange} onClose={handleCancel} onSubmit={handleSubmit} />\n            </SolacePopover>\n\n            <SolaceButton aria-describedby={id} variant="call-to-action" onClick={handleClick}>\n                Click Me To Launch Popover\n            </SolaceButton>\n        </div>;\n}',...WithFormValidation.parameters?.docs?.source}}};const __namedExportsOrder=["DefaultPopover","WithAnchorAndTransformOrigin","WithCustomAnchorOffest","WithAnchorPosition","WithFormValidation"]},"./node_modules/@storybook/test/dist sync recursive":module=>{function webpackEmptyContext(req){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}webpackEmptyContext.keys=()=>[],webpackEmptyContext.resolve=webpackEmptyContext,webpackEmptyContext.id="./node_modules/@storybook/test/dist sync recursive",module.exports=webpackEmptyContext}}]);