/*
 * Copyright 2023-2025 Solace Systems. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import React, { useState } from "react";
import { Meta, StoryObj } from "@storybook/react";
import { action } from "@storybook/addon-actions";
import {
	SolaceNavigationBar,
	SolaceNavigationBarProps,
	SolaceNavigationLink,
	SolaceNavigationUserAction,
	createTheme,
	ThemeProvider,
	SolaceTheme,
	SupportedThemes,
	useTheme
} from "@SolaceDev/maas-react-components";
import {
	Home16Icon,
	Service16Icon,
	StackedChart16Icon,
	Information16Icon,
	Contact16Icon,
	Notification16Icon,
	User16Icon,
	Search16Icon,
	Settings16Icon,
	Help16Icon
} from "@SolaceDev/maas-icons";

// Set display name for debugging
(SolaceNavigationBar as React.FC & { displayName?: string }).displayName = "SolaceNavigationBar";

// Logo Components for Different Examples
const BrandLogo = ({ theme = "default", size = "medium" }: { theme?: string; size?: "small" | "medium" | "large" }) => {
	const height = size === "small" ? "32px" : size === "large" ? "48px" : "40px";
	const fontSize = size === "small" ? "18px" : size === "large" ? "24px" : "20px";
	
	const logoStyles: Record<string, React.CSSProperties> = {
		default: {
			fontWeight: "bold",
			fontSize,
			height,
			display: "flex",
			alignItems: "center",
			color: "#1976d2",
			padding: "0 8px"
		},
		solace: {
			fontWeight: "bold",
			fontSize,
			height,
			display: "flex",
			alignItems: "center",
			color: "#00c895",
			padding: "0 8px",
			background: "linear-gradient(45deg, #00c895, #00a378)",
			WebkitBackgroundClip: "text",
			WebkitTextFillColor: "transparent"
		},
		sap: {
			fontWeight: "bold",
			fontSize,
			height,
			display: "flex",
			alignItems: "center",
			color: "#0f7df2",
			padding: "0 8px"
		},
		boomi: {
			fontWeight: "bold",
			fontSize,
			height,
			display: "flex",
			alignItems: "center",
			color: "#7b68ee",
			padding: "0 8px"
		}
	};
	
	return <div style={logoStyles[theme] || logoStyles.default}>MaaS Platform</div>;
};

// Utility function to create consistent icon components
const createIconComponent = (IconComponent: React.ComponentType<any>, size = 16) => (
	<IconComponent width={size} height={size} />
);

// Enhanced navigation links with icons and various states
const mockNavigationLinks: SolaceNavigationLink[] = [
	{
		id: "home",
		label: "Dashboard",
		href: "/dashboard",
		onClick: action("navigate-dashboard"),
		active: true,
		icon: createIconComponent(Home16Icon),
		ariaLabel: "Navigate to Dashboard - Current page"
	},
	{
		id: "services",
		label: "Services",
		href: "/services",
		onClick: action("navigate-services"),
		icon: createIconComponent(Service16Icon),
		ariaLabel: "Navigate to Services"
	},
	{
		id: "analytics",
		label: "Analytics",
		href: "/analytics",
		onClick: action("navigate-analytics"),
		icon: createIconComponent(StackedChart16Icon),
		ariaLabel: "Navigate to Analytics"
	},
	{
		id: "documentation",
		label: "Documentation",
		href: "/docs",
		onClick: action("navigate-docs"),
		icon: createIconComponent(Information16Icon),
		ariaLabel: "Navigate to Documentation"
	},
	{
		id: "support",
		label: "Support",
		href: "/support",
		onClick: action("navigate-support"),
		icon: createIconComponent(Contact16Icon),
		ariaLabel: "Navigate to Support"
	}
];

// Navigation links with disabled states for demos
const mockNavigationLinksWithDisabled: SolaceNavigationLink[] = [
	...mockNavigationLinks.slice(0, 2),
	{
		id: "beta-feature",
		label: "Beta Feature",
		href: "/beta",
		onClick: action("navigate-beta"),
		disabled: true,
		icon: createIconComponent(StackedChart16Icon),
		ariaLabel: "Beta Feature - Coming Soon (Disabled)"
	},
	...mockNavigationLinks.slice(3)
];

// Minimal navigation links for simple examples
const minimalNavigationLinks: SolaceNavigationLink[] = [
	{
		id: "home",
		label: "Home",
		href: "/",
		active: true,
		onClick: action("home-clicked")
	},
	{
		id: "about",
		label: "About",
		href: "/about",
		onClick: action("about-clicked")
	},
	{
		id: "contact",
		label: "Contact",
		href: "/contact",
		onClick: action("contact-clicked")
	}
];

// Enhanced user actions with proper icons and states
const mockUserActions: SolaceNavigationUserAction[] = [
	{
		id: "search",
		content: createIconComponent(Search16Icon),
		onClick: action("search-clicked"),
		ariaLabel: "Open search",
		tooltip: "Search"
	},
	{
		id: "notifications",
		content: (
			<div style={{ position: "relative" }}>
				{createIconComponent(Notification16Icon)}
				<span style={{
					position: "absolute",
					top: "-4px",
					right: "-4px",
					width: "8px",
					height: "8px",
					background: "#f44336",
					borderRadius: "50%"
				}} aria-hidden="true" />
			</div>
		),
		onClick: action("notifications-clicked"),
		ariaLabel: "View notifications (3 unread)",
		tooltip: "Notifications"
	},
	{
		id: "settings",
		content: createIconComponent(Settings16Icon),
		onClick: action("settings-clicked"),
		ariaLabel: "Open settings",
		tooltip: "Settings"
	},
	{
		id: "profile",
		content: createIconComponent(User16Icon),
		onClick: action("profile-clicked"),
		ariaLabel: "View profile menu",
		tooltip: "User Profile"
	}
];

// Simplified user actions for minimal examples
const minimalUserActions: SolaceNavigationUserAction[] = [
	{
		id: "help",
		content: createIconComponent(Help16Icon),
		onClick: action("help-clicked"),
		ariaLabel: "Get help",
		tooltip: "Help"
	},
	{
		id: "profile",
		content: createIconComponent(User16Icon),
		onClick: action("profile-clicked"),
		ariaLabel: "User menu",
		tooltip: "Account"
	}
];

// User actions with disabled state
const mockUserActionsWithDisabled: SolaceNavigationUserAction[] = [
	...mockUserActions.slice(0, 2),
	{
		id: "premium-feature",
		content: createIconComponent(Settings16Icon),
		onClick: action("premium-clicked"),
		ariaLabel: "Premium feature (requires upgrade)",
		tooltip: "Premium Settings",
		disabled: true
	},
	mockUserActions[3]
];

// Storybook meta configuration with comprehensive documentation
const meta: Meta<typeof SolaceNavigationBar> = {
	title: "Navigation/SolaceNavigationBar",
	component: SolaceNavigationBar,
	parameters: {
		layout: "fullscreen",
		docs: {
			description: {
				component: `
# SolaceNavigationBar

A comprehensive, accessible navigation component designed for modern web applications with full theme support and responsive behavior.

## Features

### ðŸŽ¨ **Multi-Theme Support**
- **Solace Theme**: Modern gradient brand colors with enhanced accessibility
- **SAP Theme**: Professional blue palette following SAP design guidelines
- **Boomi Theme**: Purple-accent corporate styling
- **Base Theme**: Neutral, adaptable foundation theme

### â™¿ **Accessibility (WCAG 2.1 AA Compliant)**
- **Keyboard Navigation**: Full arrow key navigation, Tab/Shift+Tab support
- **Screen Reader Support**: Proper ARIA landmarks, live regions, and semantic HTML
- **Focus Management**: Visible focus indicators and logical tab order
- **Skip Navigation**: Built-in skip links for screen reader users
- **High Contrast**: Enhanced visibility in high contrast mode
- **Reduced Motion**: Respects user's motion preferences

### ðŸ“± **Responsive Design**
- **Desktop**: Horizontal navigation with hover states
- **Tablet**: Adaptive layout with touch-friendly targets
- **Mobile**: Hamburger menu with slide-out navigation panel
- **Custom Breakpoints**: Configurable responsive behavior

### ðŸš€ **Advanced Features**
- **Sticky Navigation**: Optional fixed positioning with smooth scrolling
- **Logo Integration**: Flexible brand element placement
- **User Actions**: Right-aligned action buttons with tooltips
- **Active States**: Visual indicators for current page
- **Disabled States**: Proper handling of unavailable navigation items
- **Performance Optimized**: Minimal re-renders and efficient event handling

## Keyboard Interactions

| Key | Action |
|-----|--------|
| **Tab** | Navigate to/from navigation bar |
| **Enter/Space** | Activate links and buttons |
| **Escape** | Close mobile menu |
| **Left/Right Arrow** | Navigate between navigation links |
| **Down Arrow** | Open mobile menu (when toggle focused) |
| **Home/End** | Jump to first/last navigation item |

## Implementation Notes

### Theme Integration
The component automatically adapts to the active theme context. All colors, typography, and spacing follow the theme system.

### Mobile Menu Behavior
- Automatically shows hamburger menu below medium breakpoint (768px)
- Smooth animation transitions
- Focus trapping within mobile menu
- Backdrop click to close

### Performance Considerations
- Uses React.memo for user action components
- Efficient event delegation
- Minimal DOM updates during interactions
- Optimized for bundle size
				`
			}
		}
	},
	decorators: [
		(Story) => (
			<div style={{ minHeight: "100vh", background: "#f5f5f5" }}>
				<Story />
				<div style={{ padding: "2rem" }}>
					<h2>Page Content</h2>
					<p>This content demonstrates how the navigation bar integrates with page content. Try resizing the window to see responsive behavior.</p>
					<div style={{ height: "50vh", background: "white", padding: "1rem", borderRadius: "8px", marginTop: "1rem" }}>
						<p>Scroll down to test sticky navigation behavior in the "Sticky Navigation" story.</p>
					</div>
				</div>
			</div>
		)
	],
	argTypes: {
		logo: {
			description: "Logo or brand element to display on the left side",
			control: { type: "text" },
			table: {
				type: { summary: "ReactNode" },
				defaultValue: { summary: "undefined" }
			}
		},
		navigationLinks: {
			description: "Primary navigation links array with icons, states, and accessibility labels",
			control: { type: "object" },
			table: {
				type: { summary: "SolaceNavigationLink[]" },
				defaultValue: { summary: "[]" }
			}
		},
		userActions: {
			description: "User actions to display on the right side (notifications, profile, etc.)",
			control: { type: "object" },
			table: {
				type: { summary: "SolaceNavigationUserAction[]" },
				defaultValue: { summary: "[]" }
			}
		},
		enableMobileMenu: {
			description: "Whether to show mobile hamburger menu on small screens",
			control: { type: "boolean" },
			table: {
				type: { summary: "boolean" },
				defaultValue: { summary: "true" }
			}
		},
		mobileBreakpoint: {
			description: "Custom mobile breakpoint in pixels for responsive behavior",
			control: { type: "number", min: 320, max: 1200, step: 10 },
			table: {
				type: { summary: "number" },
				defaultValue: { summary: "768" }
			}
		},
		sticky: {
			description: "Whether the navigation bar should stick to the top when scrolling",
			control: { type: "boolean" },
			table: {
				type: { summary: "boolean" },
				defaultValue: { summary: "false" }
			}
		},
		height: {
			description: "Custom height for the navigation bar (string with units or number in px)",
			control: { type: "text" },
			table: {
				type: { summary: "string | number" },
				defaultValue: { summary: "theme.spacing(8)" }
			}
		},
		backgroundColor: {
			description: "Background color override (CSS color value)",
			control: { type: "color" },
			table: {
				type: { summary: "string" },
				defaultValue: { summary: "theme.palette.ux.background.w10" }
			}
		},
		bottomBorder: {
			description: "Whether to add a bottom border for visual separation",
			control: { type: "boolean" },
			table: {
				type: { summary: "boolean" },
				defaultValue: { summary: "true" }
			}
		},
		maxWidth: {
			description: "Maximum width for the navigation content container",
			control: { type: "text" },
			table: {
				type: { summary: "string | number" },
				defaultValue: { summary: "none" }
			}
		},
		centerContent: {
			description: "Whether to center the navigation content within its container",
			control: { type: "boolean" },
			table: {
				type: { summary: "boolean" },
				defaultValue: { summary: "false" }
			}
		},
		zIndex: {
			description: "z-index value for positioning control (especially with sticky navigation)",
			control: { type: "number", min: 1, max: 10000 },
			table: {
				type: { summary: "number" },
				defaultValue: { summary: "theme.zIndex.appBar (sticky) | auto" }
			}
		},
		onMobileMenuToggle: {
			description: "Callback function triggered when mobile menu is toggled",
			action: "onMobileMenuToggle",
			table: {
				type: { summary: "(isOpen: boolean) => void" }
			}
		},
		className: {
			description: "Additional CSS class name for custom styling",
			control: { type: "text" },
			table: {
				type: { summary: "string" }
			}
		},
		style: {
			description: "Custom inline styles for the navigation container",
			control: { type: "object" },
			table: {
				type: { summary: "React.CSSProperties" }
			}
		}
	},
	args: {
		logo: <BrandLogo theme="default" />,
		navigationLinks: mockNavigationLinks,
		userActions: mockUserActions,
		enableMobileMenu: true,
		mobileBreakpoint: 768,
		sticky: false,
		bottomBorder: true,
		centerContent: false,
		onMobileMenuToggle: action("mobile-menu-toggled")
	}
};

export default meta;

type Story = StoryObj<SolaceNavigationBarProps>;

// ==================================================================================
// PRIMARY STORIES - Core functionality demonstrations
// ==================================================================================

/**
 * Default navigation bar with full features
 * Demonstrates the primary use case with logo, navigation links, and user actions
 */
export const Default: Story = {
	args: {
		logo: <BrandLogo theme="default" />,
		navigationLinks: mockNavigationLinks,
		userActions: mockUserActions
	},
	parameters: {
		docs: {
			description: {
				story: "The default navigation bar configuration with logo, navigation links with icons, and user action buttons. This represents the most common use case."
			}
		}
	}
};

/**
 * Interactive Playground - Full control testing
 * Provides comprehensive controls for testing all component features
 */
export const InteractivePlayground: Story = {
	args: {
		logo: <BrandLogo theme="default" />,
		navigationLinks: mockNavigationLinks,
		userActions: mockUserActions,
		height: "64px",
		backgroundColor: undefined,
		bottomBorder: true,
		centerContent: false,
		maxWidth: undefined,
		sticky: false,
		zIndex: undefined
	},
	parameters: {
		docs: {
			description: {
				story: "Interactive example with full controls enabled. Modify props in the Controls panel to test all component functionality and see real-time changes."
			}
		}
	}
};

// ==================================================================================
// THEME DEMONSTRATIONS - Multi-theme support showcase
// ==================================================================================

/**
 * Theme Variations - All 4 supported themes
 * Demonstrates component appearance across all brand themes
 */
export const ThemeVariations: Story = {
	render: () => {
		const themes = [
			{ name: "Solace", key: SupportedThemes.newSolace, brandTheme: "solace" },
			{ name: "SAP", key: SupportedThemes.sap, brandTheme: "sap" },
			{ name: "Boomi", key: SupportedThemes.boomi, brandTheme: "boomi" },
			{ name: "Base", key: SupportedThemes.base, brandTheme: "default" }
		];

		return (
			<div style={{ display: "flex", flexDirection: "column", gap: "2rem" }}>
				{themes.map(({ name, key, brandTheme }) => (
					<div key={name}>
						<h3 style={{ margin: "0 0 1rem 0", padding: "0 1rem" }}>{name} Theme</h3>
						<ThemeProvider theme={createTheme(SolaceTheme(key))}>
							<SolaceNavigationBar
								logo={<BrandLogo theme={brandTheme} />}
								navigationLinks={mockNavigationLinks}
								userActions={mockUserActions}
								onMobileMenuToggle={action(`${name.toLowerCase()}-mobile-menu-toggled`)}
							/>
						</ThemeProvider>
					</div>
				))}
			</div>
		);
	},
	parameters: {
		docs: {
			description: {
				story: "Demonstrates the navigation bar across all 4 supported themes: Solace (modern gradient), SAP (professional blue), Boomi (purple corporate), and Base (neutral foundation). Each theme provides consistent brand-appropriate styling."
			}
		}
	}
};

/**
 * Theme Switching Demo - Interactive theme selection
 * Shows dynamic theme switching capability
 */
export const ThemeSwitchingDemo: Story = {
	render: () => {
		const [selectedTheme, setSelectedTheme] = useState<SupportedThemes>(SupportedThemes.newSolace);
		
		const themes = [
			{ name: "Solace", key: SupportedThemes.newSolace, brandTheme: "solace" },
			{ name: "SAP", key: SupportedThemes.sap, brandTheme: "sap" },
			{ name: "Boomi", key: SupportedThemes.boomi, brandTheme: "boomi" },
			{ name: "Base", key: SupportedThemes.base, brandTheme: "default" }
		];

		const currentBrandTheme = themes.find(t => t.key === selectedTheme)?.brandTheme || "default";

		return (
			<div>
				<div style={{ padding: "1rem", background: "#f5f5f5", marginBottom: "1rem" }}>
					<label style={{ fontWeight: "bold", marginRight: "1rem" }}>Select Theme:</label>
					{themes.map(({ name, key }) => (
						<label key={key} style={{ marginRight: "1rem", cursor: "pointer" }}>
							<input
								type="radio"
								name="theme"
								value={key}
								checked={selectedTheme === key}
								onChange={() => setSelectedTheme(key)}
								style={{ marginRight: "0.5rem" }}
							/>
							{name}
						</label>
					))}
				</div>
				<ThemeProvider theme={createTheme(SolaceTheme(selectedTheme))}>
					<SolaceNavigationBar
						logo={<BrandLogo theme={currentBrandTheme} />}
						navigationLinks={mockNavigationLinks}
						userActions={mockUserActions}
						onMobileMenuToggle={action("theme-switching-mobile-menu-toggled")}
					/>
				</ThemeProvider>
			</div>
		);
	},
	parameters: {
		docs: {
			description: {
				story: "Interactive theme switching demonstration. Select different themes to see real-time theme changes. This showcases how the component adapts to different brand contexts."
			}
		}
	}
};