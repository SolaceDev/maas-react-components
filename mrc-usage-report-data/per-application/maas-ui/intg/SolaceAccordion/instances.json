[
  {
    "filePath": "../../../maas-ui/micro-frontends/intg/src/components/connectors/ConnectorSidePanel.tsx",
    "props": [
      {
        "name": "summary",
        "type": "expression",
        "value": "connectorTypeDetails?.name ?? \"\""
      },
      {
        "name": "border",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "details",
        "type": "jsx",
        "value": "<SolaceStack>{renderVendorConfigurationDetails()}</SolaceStack>"
      },
      {
        "name": "expanded",
        "type": "variable",
        "value": "showSourceDetails"
      },
      {
        "name": "onChange",
        "type": "function",
        "value": "() => setShowSourceDetails(!showSourceDetails)"
      }
    ]
  },
  {
    "filePath": "../../../maas-ui/micro-frontends/intg/src/components/connectors/ConnectorSidePanel.tsx",
    "props": [
      {
        "name": "summary",
        "type": "expression",
        "value": "\"Solace\""
      },
      {
        "name": "border",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "details",
        "type": "jsx",
        "value": "<SolaceStack>\n\t\t\t\t\t\t<Box>\n\t\t\t\t\t\t\t<SolaceLabel id={\"connector_sidepanel_eventBrokerService\"}>\n\t\t\t\t\t\t\t\t{en.connectors.labels.eventBrokerService}\n\t\t\t\t\t\t\t</SolaceLabel>\n\t\t\t\t\t\t\t{(serviceDetails?.name && (\n\t\t\t\t\t\t\t\t<SolaceButton variant=\"link\" href={`/services/${serviceDetails?.id}`}>\n\t\t\t\t\t\t\t\t\t{serviceDetails.name}\n\t\t\t\t\t\t\t\t</SolaceButton>\n\t\t\t\t\t\t\t)) || <SolaceTypography>{\"-\"}</SolaceTypography>}\n\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t<Box>\n\t\t\t\t\t\t\t<SolaceLabel id={\"connector_sidepanel_bindingDestination\"}>\n\t\t\t\t\t\t\t\t{en.connectors.labels.bindingDestination}\n\t\t\t\t\t\t\t</SolaceLabel>\n\t\t\t\t\t\t\t<SolaceTypography>{getConnectorSummaryValue(solaceDestination)}</SolaceTypography>\n\t\t\t\t\t\t</Box>\n\t\t\t\t\t</SolaceStack>"
      },
      {
        "name": "expanded",
        "type": "variable",
        "value": "showTargetDetails"
      },
      {
        "name": "onChange",
        "type": "function",
        "value": "() => setShowTargetDetails(!showTargetDetails)"
      }
    ]
  },
  {
    "filePath": "../../../maas-ui/micro-frontends/intg/src/components/connectors/authentication/OAuthDetails.tsx",
    "props": [
      {
        "name": "summary",
        "type": "expression",
        "value": "en.connectors.labels.advancedAuthenticationProperties"
      },
      {
        "name": "dataQa",
        "type": "string",
        "value": "advancedAuthenticationPropsAccordion"
      },
      {
        "name": "border",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "expanded",
        "type": "variable",
        "value": "expanded"
      },
      {
        "name": "onChange",
        "type": "function",
        "value": "() => setExpanded(!expanded)"
      },
      {
        "name": "details",
        "type": "jsx",
        "value": "<SolaceStack>\n\t\t\t\t\t\t<SolaceTextField\n\t\t\t\t\t\t\tname=\"scopes\"\n\t\t\t\t\t\t\tvalue={readOnly ? getConnectorSummaryValue(oauthValues.scopes) : oauthValues.scopes}\n\t\t\t\t\t\t\treadOnly={readOnly}\n\t\t\t\t\t\t\tlabel={en.connectors.labels.scopes}\n\t\t\t\t\t\t\tdataQa=\"scopesTextField\"\n\t\t\t\t\t\t\tonChange={({ value: scopes }) => {\n\t\t\t\t\t\t\t\tsetOauthValues({\n\t\t\t\t\t\t\t\t\t...oauthValues,\n\t\t\t\t\t\t\t\t\tscopes: scopes\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<SolaceTextField\n\t\t\t\t\t\t\tname=\"clientName\"\n\t\t\t\t\t\t\tvalue={readOnly ? getConnectorSummaryValue(oauthValues.clientName) : oauthValues.clientName}\n\t\t\t\t\t\t\treadOnly={readOnly}\n\t\t\t\t\t\t\tlabel={en.connectors.labels.clientName}\n\t\t\t\t\t\t\tdataQa=\"clientNameTextField\"\n\t\t\t\t\t\t\tonChange={({ value: clientName }) => {\n\t\t\t\t\t\t\t\tsetOauthValues({\n\t\t\t\t\t\t\t\t\t...oauthValues,\n\t\t\t\t\t\t\t\t\tclientName: clientName\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</SolaceStack>"
      }
    ]
  },
  {
    "filePath": "../../../maas-ui/micro-frontends/intg/src/components/connectors/authentication/ClientCertAuthenticationDetails.tsx",
    "props": [
      {
        "name": "summary",
        "type": "expression",
        "value": "en.connectors.labels.advancedAuthenticationProperties"
      },
      {
        "name": "dataQa",
        "type": "string",
        "value": "advancedAuthenticationPropsAccordion"
      },
      {
        "name": "border",
        "type": "boolean",
        "value": "false"
      },
      {
        "name": "expanded",
        "type": "variable",
        "value": "expanded"
      },
      {
        "name": "onChange",
        "type": "function",
        "value": "() => setExpanded(!expanded)"
      },
      {
        "name": "details",
        "type": "jsx",
        "value": "<SolaceStack>\n\t\t\t\t\t\t<SolaceSelect\n\t\t\t\t\t\t\tdataQa=\"sslKeyStoreFormatTypeField\"\n\t\t\t\t\t\t\tid=\"sslKeyStoreFormatType\"\n\t\t\t\t\t\t\tlabel={en.connectors.labels.sslKeyStoreFormat}\n\t\t\t\t\t\t\tname={\"sslKeyStoreFormat\"}\n\t\t\t\t\t\t\tonChange={({ value: sslKeyStoreFormat }) => {\n\t\t\t\t\t\t\t\tsetClientCertValues({\n\t\t\t\t\t\t\t\t\t...clientCertValues,\n\t\t\t\t\t\t\t\t\tsslKeyStoreFormat: sslKeyStoreFormat as SslKeyStoreFormatType\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tvalue={clientCertValues.sslKeyStoreFormat}\n\t\t\t\t\t\t\treadOnly={readOnly}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{sslKeyStoreFormatTypes.map((option, index) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<MenuItem key={`${index}-${option}`} value={option}>\n\t\t\t\t\t\t\t\t\t\t{option}\n\t\t\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</SolaceSelect>\n\t\t\t\t\t\t<SolaceTextField\n\t\t\t\t\t\t\tname=\"sslKeyStorePassword\"\n\t\t\t\t\t\t\tvalue={\n\t\t\t\t\t\t\t\treadOnly\n\t\t\t\t\t\t\t\t\t? getConnectorSummaryValue(clientCertValues.sslKeyStorePassword)\n\t\t\t\t\t\t\t\t\t: clientCertValues.sslKeyStorePassword\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treadOnly={readOnly}\n\t\t\t\t\t\t\tlabel={en.connectors.labels.sslKeyStorePassword}\n\t\t\t\t\t\t\tdataQa=\"sslKeyStorePasswordTextField\"\n\t\t\t\t\t\t\tonChange={({ value: sslKeyStorePassword }) => {\n\t\t\t\t\t\t\t\tsetClientCertValues({\n\t\t\t\t\t\t\t\t\t...clientCertValues,\n\t\t\t\t\t\t\t\t\tsslKeyStorePassword: sslKeyStorePassword\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\ttype={showSslKeyStorePassword ? \"text\" : \"password\"}\n\t\t\t\t\t\t\tendAdornment={[\n\t\t\t\t\t\t\t\t<SolaceButton\n\t\t\t\t\t\t\t\t\tkey={showSslKeyStorePassword ? \"eyeIcon\" : \"hideEyeIcon\"}\n\t\t\t\t\t\t\t\t\tdataQa={showSslKeyStorePassword ? \"showPasswordButton\" : \"hidePasswordButton\"}\n\t\t\t\t\t\t\t\t\tvariant=\"icon\"\n\t\t\t\t\t\t\t\t\tonClick={() => setShowSslKeyStorePassword(!showSslKeyStorePassword)}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{showSslKeyStorePassword ? <VisibilityShow24Icon /> : <VisibilityHide24Icon />}\n\t\t\t\t\t\t\t\t</SolaceButton>\n\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<SolaceTextField\n\t\t\t\t\t\t\tname=\"sslPrivateKeyAliasName\"\n\t\t\t\t\t\t\tvalue={\n\t\t\t\t\t\t\t\treadOnly\n\t\t\t\t\t\t\t\t\t? getConnectorSummaryValue(clientCertValues.sslPrivateKeyAliasName)\n\t\t\t\t\t\t\t\t\t: clientCertValues.sslPrivateKeyAliasName\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treadOnly={readOnly}\n\t\t\t\t\t\t\tlabel={en.connectors.labels.sslPrivateKeyAliasName}\n\t\t\t\t\t\t\tdataQa=\"sslPrivateKeyAliasNameTextField\"\n\t\t\t\t\t\t\tonChange={({ value: sslPrivateKeyAliasName }) => {\n\t\t\t\t\t\t\t\tsetClientCertValues({\n\t\t\t\t\t\t\t\t\t...clientCertValues,\n\t\t\t\t\t\t\t\t\tsslPrivateKeyAliasName: sslPrivateKeyAliasName\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<SolaceTextField\n\t\t\t\t\t\t\tname=\"sslPrivateKeyPassword\"\n\t\t\t\t\t\t\tvalue={\n\t\t\t\t\t\t\t\treadOnly\n\t\t\t\t\t\t\t\t\t? getConnectorSummaryValue(clientCertValues.sslPrivateKeyPassword)\n\t\t\t\t\t\t\t\t\t: clientCertValues.sslPrivateKeyPassword\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treadOnly={readOnly}\n\t\t\t\t\t\t\tlabel={en.connectors.labels.sslPrivateKeyPassword}\n\t\t\t\t\t\t\tdataQa=\"sslPrivateKeyPasswordTextField\"\n\t\t\t\t\t\t\tonChange={({ value: sslPrivateKeyPassword }) => {\n\t\t\t\t\t\t\t\tsetClientCertValues({\n\t\t\t\t\t\t\t\t\t...clientCertValues,\n\t\t\t\t\t\t\t\t\tsslPrivateKeyPassword: sslPrivateKeyPassword\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\ttype={showSslPrivateKeyPassword ? \"text\" : \"password\"}\n\t\t\t\t\t\t\tendAdornment={[\n\t\t\t\t\t\t\t\t<SolaceButton\n\t\t\t\t\t\t\t\t\tkey={showSslPrivateKeyPassword ? \"eyeIcon\" : \"hideEyeIcon\"}\n\t\t\t\t\t\t\t\t\tdataQa={showSslPrivateKeyPassword ? \"showPasswordButton\" : \"hidePasswordButton\"}\n\t\t\t\t\t\t\t\t\tvariant=\"icon\"\n\t\t\t\t\t\t\t\t\tonClick={() => setShowSslPrivateKeyPassword(!showSslPrivateKeyPassword)}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{showSslPrivateKeyPassword ? <VisibilityShow24Icon /> : <VisibilityHide24Icon />}\n\t\t\t\t\t\t\t\t</SolaceButton>\n\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<SolaceTextField\n\t\t\t\t\t\t\tname=\"clientUsername\"\n\t\t\t\t\t\t\tvalue={\n\t\t\t\t\t\t\t\treadOnly ? getConnectorSummaryValue(clientCertValues.clientUsername) : clientCertValues.clientUsername\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treadOnly={readOnly}\n\t\t\t\t\t\t\tlabel={en.connectors.labels.clientUsername}\n\t\t\t\t\t\t\tdataQa=\"clientUsernameClientCertAuthTextField\"\n\t\t\t\t\t\t\tonChange={({ value: clientUsername }) => {\n\t\t\t\t\t\t\t\tsetClientCertValues({\n\t\t\t\t\t\t\t\t\t...clientCertValues,\n\t\t\t\t\t\t\t\t\tclientUsername: clientUsername\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tonBlur={() => {\n\t\t\t\t\t\t\t\tif (isEmpty(clientCertValues.clientUsername)) {\n\t\t\t\t\t\t\t\t\tsetSolaceValidationErrors({\n\t\t\t\t\t\t\t\t\t\t...solaceValidationErrors,\n\t\t\t\t\t\t\t\t\t\tclientCertUsername: en.connectors.labels.validationErrors.missingRequiredField(\n\t\t\t\t\t\t\t\t\t\t\ten.connectors.labels.clientUsername\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tsetSolaceValidationErrors({\n\t\t\t\t\t\t\t\t\t\t...solaceValidationErrors,\n\t\t\t\t\t\t\t\t\t\tclientCertUsername: \"\"\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\thasErrors={!readOnly && !!solaceValidationErrors.clientCertUsername}\n\t\t\t\t\t\t\thelperText={\n\t\t\t\t\t\t\t\t!readOnly\n\t\t\t\t\t\t\t\t\t? solaceValidationErrors.clientCertUsername && validationEnabled\n\t\t\t\t\t\t\t\t\t\t? solaceValidationErrors.clientCertUsername\n\t\t\t\t\t\t\t\t\t\t: en.connectors.helperText.clientUsername\n\t\t\t\t\t\t\t\t\t: undefined\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</SolaceStack>"
      }
    ]
  }
]