(self.webpackChunkstorybook=self.webpackChunkstorybook||[]).push([[1079],{"./src/stories/data-visualization/donutchart/SolaceDonutChart.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{DefaultChart:()=>DefaultChart,LargeSize:()=>LargeSize,MediumSize:()=>MediumSize,WithDynamicData:()=>WithDynamicData,WithInnerIcon:()=>WithInnerIcon,WithSingleDataPoint:()=>WithSingleDataPoint,WithTooltip:()=>WithTooltip,WithUndefinedColorAndLabel:()=>WithUndefinedColorAndLabel,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_SolaceDev_maas_react_components__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../dist/index.js"),_storybook_test__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@storybook/test/dist/index.mjs");_SolaceDev_maas_react_components__WEBPACK_IMPORTED_MODULE_1__.SolaceDonutChart.displayName="SolaceDonutChart",_SolaceDev_maas_react_components__WEBPACK_IMPORTED_MODULE_1__.SolaceButton.displayName="SolaceButton";const __WEBPACK_DEFAULT_EXPORT__={title:"Data Visualization/Donut Chart",component:_SolaceDev_maas_react_components__WEBPACK_IMPORTED_MODULE_1__.SolaceDonutChart,args:{data:[],size:"md",showTooltip:!1,icon:void 0,iconWidth:void 0,iconHeight:void 0,dataQa:"",dataTags:""},parameters:{},argTypes:{data:{control:{type:"object"},description:"Array of data objects to display in the donut chart. Each object should contain name, value, and optionally color and label properties. Use this to provide the chart data that will be visualized as segments.",table:{type:{summary:"Array<{name: string, value: number, color?: string, label?: string}>"},defaultValue:{summary:"[]"}}},size:{options:["sm","md","lg"],control:{type:"select"},description:"Controls the size of the donut chart. Use 'sm' for compact displays, 'md' for standard layouts, and 'lg' for prominent chart presentations. The size affects both the outer and inner radius of the chart.",table:{type:{summary:'"sm" | "md" | "lg"'},defaultValue:{summary:'"md"'}}},showTooltip:{control:{type:"boolean"},description:"If true, displays tooltips when hovering over chart segments. Tooltips show the segment name, value, and percentage. Enable this to provide additional context for chart data.",table:{type:{summary:"boolean"},defaultValue:{summary:"false"}}},icon:{control:{type:"object"},description:"Optional icon to display in the center of the donut chart. Use this to add visual context or branding to the chart. Should be a React element/component.",table:{type:{summary:"React.ReactElement"},defaultValue:{summary:"undefined"}}},iconWidth:{control:{type:"number"},description:"Width of the center icon in pixels. Use this to control the size of the icon displayed in the chart center. Should be used together with iconHeight for proper scaling.",table:{type:{summary:"number"},defaultValue:{summary:"undefined"}}},iconHeight:{control:{type:"number"},description:"Height of the center icon in pixels. Use this to control the size of the icon displayed in the chart center. Should be used together with iconWidth for proper scaling.",table:{type:{summary:"number"},defaultValue:{summary:"undefined"}}},dataQa:{control:{type:"text"},description:"Data attribute for QA testing. Use this to identify the chart during automated testing.",table:{type:{summary:"string"},defaultValue:{summary:"undefined"}}},dataTags:{control:{type:"text"},description:"Data attribute for additional tagging. Use this for analytics, tracking, or additional metadata.",table:{type:{summary:"string"},defaultValue:{summary:"undefined"}}}}},Template=args=>react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{style:{margin:"50px 150px"}},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SolaceDev_maas_react_components__WEBPACK_IMPORTED_MODULE_1__.SolaceDonutChart,args)),DEFAULT_DATA=[{name:"A",value:400,color:"#0088FE",label:"label A"},{name:"B",value:300,color:"#00C49F",label:"label B"},{name:"C",value:300,color:"#FFBB28",label:"label C"},{name:"D",value:200,color:"#FF8042",label:"label D"}],DefaultChart={render:Template,args:{data:DEFAULT_DATA}},WithTooltip={render:Template,args:{...DefaultChart.args,showTooltip:!0},play:async _ref=>{let{canvasElement}=_ref;const targetElement=canvasElement.querySelector(".recharts-pie-sector");targetElement&&await _storybook_test__WEBPACK_IMPORTED_MODULE_2__.mV.hover(targetElement)},decorators:[Story=>react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{id:"snapshot",style:{position:"absolute",top:0,left:0,width:"100vw",height:"100vh"}},react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{style:{margin:"16px"}},react__WEBPACK_IMPORTED_MODULE_0__.createElement(Story,null)))]},WithSingleDataPoint={render:Template,args:{...DefaultChart.args,showTooltip:!0,data:[{name:"A",value:100,color:"#0088FE",label:"label A"}]}},WithInnerIcon={render:Template,args:{...DefaultChart.args,showTooltip:!0,icon:react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SolaceDev_maas_react_components__WEBPACK_IMPORTED_MODULE_1__.InfoIcon,{size:24,fill:"grey"}),iconWidth:24,iconHeight:24}},LargeSize={render:Template,args:{...DefaultChart.args,size:"lg",showTooltip:!0}},MediumSize={render:Template,args:{...DefaultChart.args,size:"md",showTooltip:!0}},WithUndefinedColorAndLabel={render:Template,args:{data:[{name:"A",value:400},{name:"B",value:300},{name:"C",value:300},{name:"D",value:200}],showTooltip:!0,size:"lg"}},WithDynamicData=()=>{const[data,setData]=react__WEBPACK_IMPORTED_MODULE_0__.useState(DEFAULT_DATA);return react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{style:{margin:"50px 150px"}},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SolaceDev_maas_react_components__WEBPACK_IMPORTED_MODULE_1__.SolaceDonutChart,{data,size:"lg",showTooltip:!0}),react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{style:{margin:"30px 0"}},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_SolaceDev_maas_react_components__WEBPACK_IMPORTED_MODULE_1__.SolaceButton,{onClick:()=>{const newData=data.map((item=>({...item,value:Math.floor(500*Math.random())})));setData(newData)},variant:"call-to-action"},"Update with Random Values")))};DefaultChart.parameters={...DefaultChart.parameters,docs:{...DefaultChart.parameters?.docs,source:{originalSource:"{\n  render: Template,\n  args: {\n    data: DEFAULT_DATA\n  }\n}",...DefaultChart.parameters?.docs?.source}}},WithTooltip.parameters={...WithTooltip.parameters,docs:{...WithTooltip.parameters?.docs,source:{originalSource:'{\n  render: Template,\n  args: {\n    ...DefaultChart.args,\n    showTooltip: true\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const targetElement = canvasElement.querySelector(".recharts-pie-sector");\n    if (targetElement) {\n      await userEvent.hover(targetElement);\n    }\n  },\n  decorators: [withSnapshotContainer]\n}',...WithTooltip.parameters?.docs?.source}}},WithSingleDataPoint.parameters={...WithSingleDataPoint.parameters,docs:{...WithSingleDataPoint.parameters?.docs,source:{originalSource:'{\n  render: Template,\n  args: {\n    ...DefaultChart.args,\n    showTooltip: true,\n    data: [{\n      name: "A",\n      value: 100,\n      color: "#0088FE",\n      label: "label A"\n    }]\n  }\n}',...WithSingleDataPoint.parameters?.docs?.source}}},WithInnerIcon.parameters={...WithInnerIcon.parameters,docs:{...WithInnerIcon.parameters?.docs,source:{originalSource:'{\n  render: Template,\n  args: {\n    ...DefaultChart.args,\n    showTooltip: true,\n    icon: <InfoIcon size={24} fill="grey" />,\n    iconWidth: 24,\n    iconHeight: 24\n  }\n}',...WithInnerIcon.parameters?.docs?.source}}},LargeSize.parameters={...LargeSize.parameters,docs:{...LargeSize.parameters?.docs,source:{originalSource:'{\n  render: Template,\n  args: {\n    ...DefaultChart.args,\n    size: "lg",\n    showTooltip: true\n  }\n}',...LargeSize.parameters?.docs?.source}}},MediumSize.parameters={...MediumSize.parameters,docs:{...MediumSize.parameters?.docs,source:{originalSource:'{\n  render: Template,\n  args: {\n    ...DefaultChart.args,\n    size: "md",\n    showTooltip: true\n  }\n}',...MediumSize.parameters?.docs?.source}}},WithUndefinedColorAndLabel.parameters={...WithUndefinedColorAndLabel.parameters,docs:{...WithUndefinedColorAndLabel.parameters?.docs,source:{originalSource:'{\n  render: Template,\n  args: {\n    data: [{\n      name: "A",\n      value: 400\n    }, {\n      name: "B",\n      value: 300\n    }, {\n      name: "C",\n      value: 300\n    }, {\n      name: "D",\n      value: 200\n    }],\n    showTooltip: true,\n    size: "lg"\n  }\n}',...WithUndefinedColorAndLabel.parameters?.docs?.source}}},WithDynamicData.parameters={...WithDynamicData.parameters,docs:{...WithDynamicData.parameters?.docs,source:{originalSource:'() => {\n  const [data, setData] = React.useState(DEFAULT_DATA);\n  const updateRandomValue = () => {\n    const newData = data.map(item => ({\n      ...item,\n      value: Math.floor(Math.random() * 500)\n    }));\n    setData(newData);\n  };\n  return <div style={{\n    margin: "50px 150px"\n  }}>\n            <SolaceDonutChart data={data} size="lg" showTooltip={true} />\n            <div style={{\n      margin: "30px 0"\n    }}>\n                <SolaceButton onClick={updateRandomValue} variant="call-to-action">\n                    Update with Random Values\n                </SolaceButton>\n            </div>\n        </div>;\n}',...WithDynamicData.parameters?.docs?.source}}};const __namedExportsOrder=["DefaultChart","WithTooltip","WithSingleDataPoint","WithInnerIcon","LargeSize","MediumSize","WithUndefinedColorAndLabel","WithDynamicData"]},"./node_modules/@storybook/test/dist sync recursive":module=>{function webpackEmptyContext(req){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}webpackEmptyContext.keys=()=>[],webpackEmptyContext.resolve=webpackEmptyContext,webpackEmptyContext.id="./node_modules/@storybook/test/dist sync recursive",module.exports=webpackEmptyContext}}]);